{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "3_LSTM_Stock.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0a0KPOPJtu_S",
        "colab_type": "text"
      },
      "source": [
        "# Lab - 3 New York Stock Exchange stock price prediction using LSTM\n",
        "\n",
        "Use S&P 500 companies historical prices to predict future prices\n",
        "\n",
        "![alt text](https://farm4.staticflickr.com/3835/14313202637_0cc6ec8649_z_d.jpg)\n",
        "\n",
        "Reference:https://www.kaggle.com/dgawlik/nyse/home\n",
        "\n",
        "This dataset is a playground for fundamental and technical analysis. It is said that 30% of traffic on stocks is already generated by machines, can trading be fully automated? If not, there is still a lot to learn from historical data.\n",
        "\n",
        "Most of data spans from 2010 to the end 2016, for companies new on stock market date range is shorter. There have been approx. 140 stock splits in that time"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i-Iv2AY56Swn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "outputId": "b1ab35a7-1cfa-49f4-ecdb-3f91fef52123"
      },
      "source": [
        "!wget https://raw.githubusercontent.com/davidjohnnn/econ/master/prices-split-adjusted.csv"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2020-08-28 04:50:42--  https://raw.githubusercontent.com/davidjohnnn/econ/master/prices-split-adjusted.csv\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 52701226 (50M) [text/plain]\n",
            "Saving to: ‘prices-split-adjusted.csv.1’\n",
            "\n",
            "prices-split-adjust 100%[===================>]  50.26M   189MB/s    in 0.3s    \n",
            "\n",
            "2020-08-28 04:50:43 (189 MB/s) - ‘prices-split-adjusted.csv.1’ saved [52701226/52701226]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Swp7Xt75Vte8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3ff358d4-6374-4640-dea0-5d5296527a84"
      },
      "source": [
        "!ls"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "prices-split-adjusted.csv  prices-split-adjusted.csv.1\tsample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rLGv7PEHN0Ig",
        "colab_type": "text"
      },
      "source": [
        "# Setup\n",
        "import libraries needed for this application"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NBvORAQ27MGF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "datapath = 'prices-split-adjusted.csv' #or locate in google drive\n"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AqjL7z3eH75v",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#import sys\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "import itertools\n",
        "from sklearn import preprocessing\n",
        "from operator import itemgetter\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "from keras.models import Sequential\n",
        "from keras.layers.core import Dense, Dropout, Activation\n",
        "from keras.layers.recurrent import LSTM\n",
        "import keras\n",
        "import matplotlib.pyplot as plt2"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "12I7q96ySLac",
        "colab_type": "text"
      },
      "source": [
        "# Read data\n",
        "\n",
        "![alt text](https://cdn.pixabay.com/photo/2017/09/01/05/49/reading-2703163_1280.jpg)\n",
        "\n",
        "#### Let's read the CSV file and find out what does it look like?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LxhQMsx8TiwQ",
        "colab_type": "text"
      },
      "source": [
        "The first 5 rows of this dataset contains the value of WLTM  during 5 Jan 2016 - 11 Jan 2016.  It contains stock prices of other companies in NYSE as well.\n",
        "\n",
        "WLTW - Willis Towers Watson is a global multinational risk management, insurance brokerage and advisory company. The firm has roots dating to 1828 and is the third largest insurance broker in the world.  \n",
        "\n",
        "\n",
        "![alt text](https://pbs.twimg.com/profile_images/1017751865432387584/aionGfv8_400x400.jpg)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pfmwq_PnH75z",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "outputId": "ecb5a64c-d6c3-4b9e-984a-8c44f493f144"
      },
      "source": [
        "# datapath =\"/content/stock/prices-split-adjusted.csv\"\n",
        "df = pd.read_csv(datapath, index_col = 0)\n",
        "df[\"mv close\"] = df.close\n",
        "df.drop(['volume','close'], 1, inplace=True)\n",
        "df.head()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>symbol</th>\n",
              "      <th>open</th>\n",
              "      <th>low</th>\n",
              "      <th>high</th>\n",
              "      <th>mv close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2016-01-05</th>\n",
              "      <td>WLTW</td>\n",
              "      <td>123.430000</td>\n",
              "      <td>122.309998</td>\n",
              "      <td>126.250000</td>\n",
              "      <td>125.839996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-06</th>\n",
              "      <td>WLTW</td>\n",
              "      <td>125.239998</td>\n",
              "      <td>119.940002</td>\n",
              "      <td>125.540001</td>\n",
              "      <td>119.980003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-07</th>\n",
              "      <td>WLTW</td>\n",
              "      <td>116.379997</td>\n",
              "      <td>114.930000</td>\n",
              "      <td>119.739998</td>\n",
              "      <td>114.949997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-08</th>\n",
              "      <td>WLTW</td>\n",
              "      <td>115.480003</td>\n",
              "      <td>113.500000</td>\n",
              "      <td>117.440002</td>\n",
              "      <td>116.620003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-01-11</th>\n",
              "      <td>WLTW</td>\n",
              "      <td>117.010002</td>\n",
              "      <td>114.089996</td>\n",
              "      <td>117.330002</td>\n",
              "      <td>114.970001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           symbol        open         low        high    mv close\n",
              "date                                                             \n",
              "2016-01-05   WLTW  123.430000  122.309998  126.250000  125.839996\n",
              "2016-01-06   WLTW  125.239998  119.940002  125.540001  119.980003\n",
              "2016-01-07   WLTW  116.379997  114.930000  119.739998  114.949997\n",
              "2016-01-08   WLTW  115.480003  113.500000  117.440002  116.620003\n",
              "2016-01-11   WLTW  117.010002  114.089996  117.330002  114.970001"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KInBtx_AUfvt",
        "colab_type": "text"
      },
      "source": [
        "### Statistical Summary of this dataset\n",
        "\n",
        "*   count = number of rows in the dataset\n",
        "*   mean  = average opening/low/high/closing  price\n",
        "*   std = standard deviation\n",
        "*   min = min. opening/low/high/closing  price\n",
        "*   price at 25%/50%/75% percentile\n",
        "*   max = max. opening/low/high/closing  price\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xV-xZLaySgEe",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "outputId": "88da8bd3-a1e5-4938-c602-0bb0098c20a5"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>open</th>\n",
              "      <th>low</th>\n",
              "      <th>high</th>\n",
              "      <th>mv close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>851264.000000</td>\n",
              "      <td>851264.000000</td>\n",
              "      <td>851264.000000</td>\n",
              "      <td>851264.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>64.993618</td>\n",
              "      <td>64.336541</td>\n",
              "      <td>65.639748</td>\n",
              "      <td>65.011913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>75.203893</td>\n",
              "      <td>74.459518</td>\n",
              "      <td>75.906861</td>\n",
              "      <td>75.201216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.660000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.810000</td>\n",
              "      <td>1.590000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>31.270000</td>\n",
              "      <td>30.940001</td>\n",
              "      <td>31.620001</td>\n",
              "      <td>31.292776</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>48.459999</td>\n",
              "      <td>47.970001</td>\n",
              "      <td>48.959999</td>\n",
              "      <td>48.480000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>75.120003</td>\n",
              "      <td>74.400002</td>\n",
              "      <td>75.849998</td>\n",
              "      <td>75.139999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1584.439941</td>\n",
              "      <td>1549.939941</td>\n",
              "      <td>1600.930054</td>\n",
              "      <td>1578.130005</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                open            low           high       mv close\n",
              "count  851264.000000  851264.000000  851264.000000  851264.000000\n",
              "mean       64.993618      64.336541      65.639748      65.011913\n",
              "std        75.203893      74.459518      75.906861      75.201216\n",
              "min         1.660000       1.500000       1.810000       1.590000\n",
              "25%        31.270000      30.940001      31.620001      31.292776\n",
              "50%        48.459999      47.970001      48.959999      48.480000\n",
              "75%        75.120003      74.400002      75.849998      75.139999\n",
              "max      1584.439941    1549.939941    1600.930054    1578.130005"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zUPSU9PAXZxg",
        "colab_type": "text"
      },
      "source": [
        "There are over 500 companies in this dataset including  Google, IBM, CBS Corporation, etc."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nv7HzTGLH754",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "26a105f3-a35b-40e4-ac1e-26168d5f61d1"
      },
      "source": [
        "#Symbol dimension\n",
        "symbols = list(set(df.symbol))\n",
        "print(\"Here are the list of companies in NYSE\")\n",
        "print(sorted(symbols))\n",
        "print(\"There are \" + str(len(symbols)) + \" companies in NYSE\" )"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Here are the list of companies in NYSE\n",
            "['A', 'AAL', 'AAP', 'AAPL', 'ABBV', 'ABC', 'ABT', 'ACN', 'ADBE', 'ADI', 'ADM', 'ADP', 'ADS', 'ADSK', 'AEE', 'AEP', 'AES', 'AET', 'AFL', 'AGN', 'AIG', 'AIV', 'AIZ', 'AJG', 'AKAM', 'ALB', 'ALK', 'ALL', 'ALLE', 'ALXN', 'AMAT', 'AME', 'AMG', 'AMGN', 'AMP', 'AMT', 'AMZN', 'AN', 'ANTM', 'AON', 'APA', 'APC', 'APD', 'APH', 'ARNC', 'ATVI', 'AVB', 'AVGO', 'AVY', 'AWK', 'AXP', 'AYI', 'AZO', 'BA', 'BAC', 'BAX', 'BBBY', 'BBT', 'BBY', 'BCR', 'BDX', 'BEN', 'BHI', 'BIIB', 'BK', 'BLK', 'BLL', 'BMY', 'BSX', 'BWA', 'BXP', 'C', 'CA', 'CAG', 'CAH', 'CAT', 'CB', 'CBG', 'CBS', 'CCI', 'CCL', 'CELG', 'CERN', 'CF', 'CFG', 'CHD', 'CHK', 'CHRW', 'CHTR', 'CI', 'CINF', 'CL', 'CLX', 'CMA', 'CMCSA', 'CME', 'CMG', 'CMI', 'CMS', 'CNC', 'CNP', 'COF', 'COG', 'COH', 'COL', 'COO', 'COP', 'COST', 'COTY', 'CPB', 'CRM', 'CSCO', 'CSRA', 'CSX', 'CTAS', 'CTL', 'CTSH', 'CTXS', 'CVS', 'CVX', 'CXO', 'D', 'DAL', 'DD', 'DE', 'DFS', 'DG', 'DGX', 'DHI', 'DHR', 'DIS', 'DISCA', 'DISCK', 'DLPH', 'DLR', 'DLTR', 'DNB', 'DOV', 'DOW', 'DPS', 'DRI', 'DTE', 'DUK', 'DVA', 'DVN', 'EA', 'EBAY', 'ECL', 'ED', 'EFX', 'EIX', 'EL', 'EMN', 'EMR', 'ENDP', 'EOG', 'EQIX', 'EQR', 'EQT', 'ES', 'ESRX', 'ESS', 'ETFC', 'ETN', 'ETR', 'EVHC', 'EW', 'EXC', 'EXPD', 'EXPE', 'EXR', 'F', 'FAST', 'FB', 'FBHS', 'FCX', 'FDX', 'FE', 'FFIV', 'FIS', 'FISV', 'FITB', 'FL', 'FLIR', 'FLR', 'FLS', 'FMC', 'FOX', 'FOXA', 'FRT', 'FSLR', 'FTI', 'FTR', 'FTV', 'GD', 'GE', 'GGP', 'GILD', 'GIS', 'GLW', 'GM', 'GOOG', 'GOOGL', 'GPC', 'GPN', 'GPS', 'GRMN', 'GS', 'GT', 'GWW', 'HAL', 'HAR', 'HAS', 'HBAN', 'HBI', 'HCA', 'HCN', 'HCP', 'HD', 'HES', 'HIG', 'HOG', 'HOLX', 'HON', 'HP', 'HPE', 'HPQ', 'HRB', 'HRL', 'HRS', 'HSIC', 'HST', 'HSY', 'HUM', 'IBM', 'ICE', 'IDXX', 'IFF', 'ILMN', 'INTC', 'INTU', 'IP', 'IPG', 'IR', 'IRM', 'ISRG', 'ITW', 'IVZ', 'JBHT', 'JCI', 'JEC', 'JNJ', 'JNPR', 'JPM', 'JWN', 'K', 'KEY', 'KHC', 'KIM', 'KLAC', 'KMB', 'KMI', 'KMX', 'KO', 'KORS', 'KR', 'KSS', 'KSU', 'L', 'LB', 'LEG', 'LEN', 'LH', 'LKQ', 'LLL', 'LLTC', 'LLY', 'LMT', 'LNC', 'LNT', 'LOW', 'LRCX', 'LUK', 'LUV', 'LVLT', 'LYB', 'M', 'MA', 'MAA', 'MAC', 'MAR', 'MAS', 'MAT', 'MCD', 'MCHP', 'MCK', 'MCO', 'MDLZ', 'MDT', 'MET', 'MHK', 'MJN', 'MKC', 'MLM', 'MMC', 'MMM', 'MNK', 'MNST', 'MO', 'MON', 'MOS', 'MPC', 'MRK', 'MRO', 'MSFT', 'MSI', 'MTB', 'MTD', 'MU', 'MUR', 'MYL', 'NAVI', 'NBL', 'NDAQ', 'NEE', 'NEM', 'NFLX', 'NFX', 'NI', 'NKE', 'NLSN', 'NOC', 'NOV', 'NRG', 'NSC', 'NTAP', 'NTRS', 'NUE', 'NVDA', 'NWL', 'NWS', 'NWSA', 'O', 'OKE', 'OMC', 'ORCL', 'ORLY', 'OXY', 'PAYX', 'PBCT', 'PBI', 'PCAR', 'PCG', 'PCLN', 'PDCO', 'PEG', 'PEP', 'PFE', 'PFG', 'PG', 'PGR', 'PH', 'PHM', 'PKI', 'PLD', 'PM', 'PNC', 'PNR', 'PNW', 'PPG', 'PPL', 'PRGO', 'PRU', 'PSA', 'PSX', 'PVH', 'PWR', 'PX', 'PXD', 'PYPL', 'QCOM', 'QRVO', 'R', 'RAI', 'RCL', 'REGN', 'RF', 'RHI', 'RHT', 'RIG', 'RL', 'ROK', 'ROP', 'ROST', 'RRC', 'RSG', 'RTN', 'SBUX', 'SCG', 'SCHW', 'SE', 'SEE', 'SHW', 'SIG', 'SJM', 'SLB', 'SLG', 'SNA', 'SNI', 'SO', 'SPG', 'SPGI', 'SPLS', 'SRCL', 'SRE', 'STI', 'STT', 'STX', 'STZ', 'SWK', 'SWKS', 'SWN', 'SYF', 'SYK', 'SYMC', 'SYY', 'T', 'TAP', 'TDC', 'TDG', 'TEL', 'TGNA', 'TGT', 'TIF', 'TJX', 'TMK', 'TMO', 'TRIP', 'TROW', 'TRV', 'TSCO', 'TSN', 'TSO', 'TSS', 'TWX', 'TXN', 'TXT', 'UAA', 'UAL', 'UDR', 'UHS', 'ULTA', 'UNH', 'UNM', 'UNP', 'UPS', 'URBN', 'URI', 'USB', 'UTX', 'V', 'VAR', 'VFC', 'VIAB', 'VLO', 'VMC', 'VNO', 'VRSK', 'VRSN', 'VRTX', 'VTR', 'VZ', 'WAT', 'WBA', 'WDC', 'WEC', 'WFC', 'WFM', 'WHR', 'WLTW', 'WM', 'WMB', 'WMT', 'WRK', 'WU', 'WY', 'WYN', 'WYNN', 'XEC', 'XEL', 'XL', 'XLNX', 'XOM', 'XRAY', 'XRX', 'XYL', 'YHOO', 'YUM', 'ZBH', 'ZION', 'ZTS']\n",
            "There are 501 companies in NYSE\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zvKb4PKQX6sE",
        "colab_type": "text"
      },
      "source": [
        "# Let's predict Google's stock price!\n",
        "\n",
        "![alt text](https://upload.wikimedia.org/wikipedia/commons/4/4a/Logo_2013_Google.png)\n",
        "* you can also replace \"GOOG\" with any company of your choice!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8_XSkIvBH756",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "outputId": "b57d7a90-412d-4ccb-f262-3fb8e62c78cc"
      },
      "source": [
        "#Focus only 1 stock :GOOG\n",
        "SYM = 'GOOG'\n",
        "df = df[df.symbol == SYM]\n",
        "df.drop(['symbol'],1,inplace=True)\n",
        "df.head()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>open</th>\n",
              "      <th>low</th>\n",
              "      <th>high</th>\n",
              "      <th>mv close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-01-04</th>\n",
              "      <td>312.304948</td>\n",
              "      <td>310.955001</td>\n",
              "      <td>313.580158</td>\n",
              "      <td>312.205308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-05</th>\n",
              "      <td>312.419511</td>\n",
              "      <td>309.610028</td>\n",
              "      <td>312.748278</td>\n",
              "      <td>310.830459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-06</th>\n",
              "      <td>311.761979</td>\n",
              "      <td>302.048370</td>\n",
              "      <td>311.761979</td>\n",
              "      <td>302.994813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-07</th>\n",
              "      <td>303.562685</td>\n",
              "      <td>295.218951</td>\n",
              "      <td>303.861575</td>\n",
              "      <td>295.941242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-08</th>\n",
              "      <td>294.895159</td>\n",
              "      <td>293.455551</td>\n",
              "      <td>300.499172</td>\n",
              "      <td>299.886470</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                  open         low        high    mv close\n",
              "date                                                      \n",
              "2010-01-04  312.304948  310.955001  313.580158  312.205308\n",
              "2010-01-05  312.419511  309.610028  312.748278  310.830459\n",
              "2010-01-06  311.761979  302.048370  311.761979  302.994813\n",
              "2010-01-07  303.562685  295.218951  303.861575  295.941242\n",
              "2010-01-08  294.895159  293.455551  300.499172  299.886470"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lj8eRV09TlXx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "outputId": "81b989ad-6dd5-4b15-92e7-86671b3fefc5"
      },
      "source": [
        "#Statistical Summary\n",
        "df.describe()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>open</th>\n",
              "      <th>low</th>\n",
              "      <th>high</th>\n",
              "      <th>mv close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1762.000000</td>\n",
              "      <td>1762.000000</td>\n",
              "      <td>1762.000000</td>\n",
              "      <td>1762.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>459.806530</td>\n",
              "      <td>455.659218</td>\n",
              "      <td>463.484281</td>\n",
              "      <td>459.617409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>174.026396</td>\n",
              "      <td>172.601608</td>\n",
              "      <td>175.232816</td>\n",
              "      <td>173.946191</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>218.336998</td>\n",
              "      <td>216.005726</td>\n",
              "      <td>220.314587</td>\n",
              "      <td>217.221182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>298.255074</td>\n",
              "      <td>295.896412</td>\n",
              "      <td>300.824200</td>\n",
              "      <td>298.389573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>436.554429</td>\n",
              "      <td>434.103619</td>\n",
              "      <td>438.701390</td>\n",
              "      <td>436.711351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>578.422067</td>\n",
              "      <td>572.884750</td>\n",
              "      <td>581.870130</td>\n",
              "      <td>577.497020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>816.679993</td>\n",
              "      <td>805.140015</td>\n",
              "      <td>816.679993</td>\n",
              "      <td>813.109985</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              open          low         high     mv close\n",
              "count  1762.000000  1762.000000  1762.000000  1762.000000\n",
              "mean    459.806530   455.659218   463.484281   459.617409\n",
              "std     174.026396   172.601608   175.232816   173.946191\n",
              "min     218.336998   216.005726   220.314587   217.221182\n",
              "25%     298.255074   295.896412   300.824200   298.389573\n",
              "50%     436.554429   434.103619   438.701390   436.711351\n",
              "75%     578.422067   572.884750   581.870130   577.497020\n",
              "max     816.679993   805.140015   816.679993   813.109985"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VI7xkq09UGY0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "a4aa0624-2214-4148-9b56-fcd454b5a5c5"
      },
      "source": [
        "#Date data dimension\n",
        "import datetime \n",
        "\n",
        "print(df.index.min())\n",
        "print(df.index.max())\n",
        "delta = datetime.datetime.strptime(df.index.max(),'%Y-%m-%d')- datetime.datetime.strptime(df.index.min(),'%Y-%m-%d')"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2010-01-04\n",
            "2016-12-30\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7BdpodyJTete",
        "colab_type": "text"
      },
      "source": [
        "# Normalize data\n",
        "Normalization is a common process in machine learning. We do it to make sure that all features are using a common scale. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BifdUT7zH75-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        },
        "outputId": "6ef0ad6d-520a-42b7-97a6-2a11d05245f4"
      },
      "source": [
        "def normalize_data(df): # nomalize stock data\n",
        "    min_max_scaler = preprocessing.MinMaxScaler() #min max scaler\n",
        "    df['open'] = min_max_scaler.fit_transform(df.open.values.reshape(-1,1))\n",
        "    df['high'] = min_max_scaler.fit_transform(df.high.values.reshape(-1,1))\n",
        "    df['low'] = min_max_scaler.fit_transform(df.low.values.reshape(-1,1))\n",
        "#    df['volume'] = min_max_scaler.fit_transform(df.volume.values.reshape(-1,1)) # already remove volume data\n",
        "    df['mv close'] = min_max_scaler.fit_transform(df['mv close'].values.reshape(-1,1))\n",
        "    return df\n",
        "df = normalize_data(df)\n",
        "df.head(10)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>open</th>\n",
              "      <th>low</th>\n",
              "      <th>high</th>\n",
              "      <th>mv close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2010-01-04</th>\n",
              "      <td>0.157047</td>\n",
              "      <td>0.161167</td>\n",
              "      <td>0.156390</td>\n",
              "      <td>0.159399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-05</th>\n",
              "      <td>0.157238</td>\n",
              "      <td>0.158884</td>\n",
              "      <td>0.154995</td>\n",
              "      <td>0.157092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-06</th>\n",
              "      <td>0.156140</td>\n",
              "      <td>0.146049</td>\n",
              "      <td>0.153341</td>\n",
              "      <td>0.143942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-07</th>\n",
              "      <td>0.142436</td>\n",
              "      <td>0.134457</td>\n",
              "      <td>0.140094</td>\n",
              "      <td>0.132105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-08</th>\n",
              "      <td>0.127950</td>\n",
              "      <td>0.131464</td>\n",
              "      <td>0.134455</td>\n",
              "      <td>0.138726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-11</th>\n",
              "      <td>0.138324</td>\n",
              "      <td>0.135632</td>\n",
              "      <td>0.135466</td>\n",
              "      <td>0.137965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-12</th>\n",
              "      <td>0.132654</td>\n",
              "      <td>0.130525</td>\n",
              "      <td>0.130204</td>\n",
              "      <td>0.129079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-13</th>\n",
              "      <td>0.115038</td>\n",
              "      <td>0.118603</td>\n",
              "      <td>0.122035</td>\n",
              "      <td>0.126245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-14</th>\n",
              "      <td>0.121207</td>\n",
              "      <td>0.126137</td>\n",
              "      <td>0.126896</td>\n",
              "      <td>0.128552</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010-01-15</th>\n",
              "      <td>0.129066</td>\n",
              "      <td>0.122104</td>\n",
              "      <td>0.126362</td>\n",
              "      <td>0.120318</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                open       low      high  mv close\n",
              "date                                              \n",
              "2010-01-04  0.157047  0.161167  0.156390  0.159399\n",
              "2010-01-05  0.157238  0.158884  0.154995  0.157092\n",
              "2010-01-06  0.156140  0.146049  0.153341  0.143942\n",
              "2010-01-07  0.142436  0.134457  0.140094  0.132105\n",
              "2010-01-08  0.127950  0.131464  0.134455  0.138726\n",
              "2010-01-11  0.138324  0.135632  0.135466  0.137965\n",
              "2010-01-12  0.132654  0.130525  0.130204  0.129079\n",
              "2010-01-13  0.115038  0.118603  0.122035  0.126245\n",
              "2010-01-14  0.121207  0.126137  0.126896  0.128552\n",
              "2010-01-15  0.129066  0.122104  0.126362  0.120318"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RFmZ10qsCUV7",
        "colab_type": "text"
      },
      "source": [
        "# Generate Data for LSTM\n",
        "![alt text](https://drive.google.com/uc?id=1SOT-t7z2qbfhzJnGmWMhJpz8JlB5V1kn)\n",
        "\n",
        "Predict the stock price based on the data from the previous 5 days"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F3-hcDDBH76D",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def load_data(stock, seq_len):   \n",
        "    n_features = len(stock.columns) #count columns of stock df 4features open/low/high/close\n",
        "    data = stock.values  #change to matrix numpy array\n",
        "    sequence_length = seq_len + 1 #5+1\n",
        "    result = []\n",
        "    \n",
        "    for index in range(len(data) - sequence_length): #1762 data but exclude sequence len , 0 to 1762-6 => 1756\n",
        "        result.append(data[index: index + sequence_length]) # construct table with 1756 2d arrays, each with [6,nfeature] (1756,6,4)\n",
        "    \n",
        "    result = np.array(result)\n",
        "    row = round(0.9 * result.shape[0]) # 90% of 1756 data\n",
        "    train = result[:int(row), :] # select first 90% as train data = 1580 data\n",
        "\n",
        "    x_train = train[:, :-1] #(1580,5,4) , x is previous 5 days data with 4 columns\n",
        "    y_train = train[:, -1][:,-1] #(1580), y is the close price of the sixth days\n",
        "    \n",
        "    x_test = result[int(row):, :-1]  # test is remaining rows 10% of data (176,5,4)\n",
        "    y_test = result[int(row):, -1][:,-1]#(176,)\n",
        "\n",
        "    x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], n_features)) # reshape again (1580,5,4)\n",
        "    x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], n_features))  \n",
        "\n",
        "    return [x_train, y_train, x_test, y_test]"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z0WnWP65H76H",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# set feature dimension and look back period\n",
        "n_features = 4\n",
        "prev_days = 5\n",
        "X_train, y_train, X_test, y_test = load_data(df, prev_days)\n",
        "# print (X_train[0], y_train[0])\n",
        "# print(X_train.shape)"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xq58-J-ECbEh",
        "colab_type": "text"
      },
      "source": [
        "# Build LSTM model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aSOFqQcd3q_g",
        "colab_type": "text"
      },
      "source": [
        "**References **\n",
        "\n",
        "Return sequence:\n",
        "\n",
        "https://machinelearningmastery.com/return-sequences-and-return-states-for-lstms-in-keras/\n",
        "https://stackoverflow.com/questions/42755820/how-to-use-return-sequences-option-and-timedistributed-layer-in-keras\n",
        "\n",
        "Reshape input for lstm\n",
        "\n",
        "https://machinelearningmastery.com/reshape-input-data-long-short-term-memory-networks-keras/\n",
        "\n",
        "\n",
        "Stack LSTM\n",
        "\n",
        " https://machinelearningmastery.com/stacked-long-short-term-memory-networks/\n",
        " http://adventuresinmachinelearning.com/keras-lstm-tutorial/\n",
        " \n",
        "![](https://drive.google.com/uc?id=123aJD6phLzahdkhntLG2JL0A4IjCakDl)\n",
        " ![](https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2017/07/architecture_stacked_lstm.png)\n",
        " ![](http://adventuresinmachinelearning.com/wp-content/uploads/2018/01/Keras-LSTM-return-sequences-diagram-1024x275.png)\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uOUwcTJxH76N",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def build_model(layers):\n",
        "    p = 0.2 #drop out 20%\n",
        "    model = Sequential() #sequential type\n",
        "\n",
        "    model.add(LSTM(256, input_shape=(layers[1], layers[0]), return_sequences=True)) # 5 previous days ,4 features\n",
        "    model.add(Dropout(p)) #drop out between layer\n",
        "\n",
        "    model.add(LSTM(256, input_shape=(layers[1], layers[0]), return_sequences=False))\n",
        "    model.add(Dropout(p))\n",
        "\n",
        "    model.add(Dense(128,activation='relu'))\n",
        "    model.add(Dense(1,activation='linear'))\n",
        "\n",
        "    model.compile(loss='mse',optimizer='adam', metrics=['mse'])\n",
        "\n",
        "    return model\n",
        "\n",
        "model = build_model([n_features, prev_days, 1])"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QiNdO5cLCeZl",
        "colab_type": "text"
      },
      "source": [
        "# Train LSTM model\n",
        "\n",
        "This is where your model learn from the dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k3p7Q_CqH76R",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "73bb1b46-a8ed-4d7e-88f8-1d906d662274"
      },
      "source": [
        "#setseed to produce same result\n",
        "from numpy.random import seed\n",
        "seed(5)\n",
        "#from tensorflow import set_random_seed\n",
        "#set_random_seed(20)\n",
        "\n",
        "# Checkpoint for call back function\n",
        "from keras.callbacks import ModelCheckpoint\n",
        "filepath=\"/content/weights.best.hdf5\" #for print only best model\n",
        "#filepath=\"/content/weights-improvement-{epoch:02d}-{val_loss:.4f}.hdf5\" #print model at all epoch\n",
        "\n",
        "checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n",
        "callbacks_list = [checkpoint]\n",
        "\n",
        "#validation split select 10% of data to validate (last 10% sequence)\n",
        "history = model.fit(X_train, y_train, batch_size=32, epochs=20, validation_split=0.1, verbose=1, callbacks =callbacks_list) \n"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "42/45 [===========================>..] - ETA: 0s - loss: 0.0095 - mse: 0.0095\n",
            "Epoch 00001: val_loss improved from inf to 0.00120, saving model to /content/weights.best.hdf5\n",
            "45/45 [==============================] - 1s 21ms/step - loss: 0.0091 - mse: 0.0091 - val_loss: 0.0012 - val_mse: 0.0012\n",
            "Epoch 2/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 8.0743e-04 - mse: 8.0743e-04\n",
            "Epoch 00002: val_loss did not improve from 0.00120\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 7.8957e-04 - mse: 7.8957e-04 - val_loss: 0.0017 - val_mse: 0.0017\n",
            "Epoch 3/20\n",
            "36/45 [=======================>......] - ETA: 0s - loss: 6.9568e-04 - mse: 6.9568e-04\n",
            "Epoch 00003: val_loss did not improve from 0.00120\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 7.0800e-04 - mse: 7.0800e-04 - val_loss: 0.0017 - val_mse: 0.0017\n",
            "Epoch 4/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 6.2935e-04 - mse: 6.2935e-04\n",
            "Epoch 00004: val_loss improved from 0.00120 to 0.00105, saving model to /content/weights.best.hdf5\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 6.4943e-04 - mse: 6.4943e-04 - val_loss: 0.0011 - val_mse: 0.0011\n",
            "Epoch 5/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 7.5513e-04 - mse: 7.5513e-04\n",
            "Epoch 00005: val_loss did not improve from 0.00105\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 7.2068e-04 - mse: 7.2068e-04 - val_loss: 0.0049 - val_mse: 0.0049\n",
            "Epoch 6/20\n",
            "36/45 [=======================>......] - ETA: 0s - loss: 6.8199e-04 - mse: 6.8199e-04\n",
            "Epoch 00006: val_loss did not improve from 0.00105\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 6.6864e-04 - mse: 6.6864e-04 - val_loss: 0.0020 - val_mse: 0.0020\n",
            "Epoch 7/20\n",
            "36/45 [=======================>......] - ETA: 0s - loss: 6.8486e-04 - mse: 6.8486e-04\n",
            "Epoch 00007: val_loss did not improve from 0.00105\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 6.4385e-04 - mse: 6.4385e-04 - val_loss: 0.0038 - val_mse: 0.0038\n",
            "Epoch 8/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 7.3779e-04 - mse: 7.3779e-04\n",
            "Epoch 00008: val_loss did not improve from 0.00105\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 7.4351e-04 - mse: 7.4351e-04 - val_loss: 0.0028 - val_mse: 0.0028\n",
            "Epoch 9/20\n",
            "38/45 [========================>.....] - ETA: 0s - loss: 6.8125e-04 - mse: 6.8125e-04\n",
            "Epoch 00009: val_loss improved from 0.00105 to 0.00080, saving model to /content/weights.best.hdf5\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 7.0973e-04 - mse: 7.0973e-04 - val_loss: 7.9685e-04 - val_mse: 7.9685e-04\n",
            "Epoch 10/20\n",
            "35/45 [======================>.......] - ETA: 0s - loss: 4.6918e-04 - mse: 4.6918e-04\n",
            "Epoch 00010: val_loss did not improve from 0.00080\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 5.2038e-04 - mse: 5.2038e-04 - val_loss: 8.1797e-04 - val_mse: 8.1797e-04\n",
            "Epoch 11/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 5.1615e-04 - mse: 5.1615e-04\n",
            "Epoch 00011: val_loss did not improve from 0.00080\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 5.2804e-04 - mse: 5.2804e-04 - val_loss: 0.0037 - val_mse: 0.0037\n",
            "Epoch 12/20\n",
            "36/45 [=======================>......] - ETA: 0s - loss: 9.0025e-04 - mse: 9.0025e-04\n",
            "Epoch 00012: val_loss improved from 0.00080 to 0.00075, saving model to /content/weights.best.hdf5\n",
            "45/45 [==============================] - 0s 6ms/step - loss: 9.0537e-04 - mse: 9.0537e-04 - val_loss: 7.5117e-04 - val_mse: 7.5117e-04\n",
            "Epoch 13/20\n",
            "38/45 [========================>.....] - ETA: 0s - loss: 5.3101e-04 - mse: 5.3101e-04\n",
            "Epoch 00013: val_loss did not improve from 0.00075\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 5.2046e-04 - mse: 5.2046e-04 - val_loss: 0.0036 - val_mse: 0.0036\n",
            "Epoch 14/20\n",
            "36/45 [=======================>......] - ETA: 0s - loss: 4.8513e-04 - mse: 4.8513e-04\n",
            "Epoch 00014: val_loss did not improve from 0.00075\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 4.9946e-04 - mse: 4.9946e-04 - val_loss: 0.0011 - val_mse: 0.0011\n",
            "Epoch 15/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 5.7016e-04 - mse: 5.7016e-04\n",
            "Epoch 00015: val_loss did not improve from 0.00075\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 6.1834e-04 - mse: 6.1834e-04 - val_loss: 0.0124 - val_mse: 0.0124\n",
            "Epoch 16/20\n",
            "38/45 [========================>.....] - ETA: 0s - loss: 7.9296e-04 - mse: 7.9296e-04\n",
            "Epoch 00016: val_loss did not improve from 0.00075\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 7.5007e-04 - mse: 7.5007e-04 - val_loss: 0.0012 - val_mse: 0.0012\n",
            "Epoch 17/20\n",
            "35/45 [======================>.......] - ETA: 0s - loss: 4.6820e-04 - mse: 4.6820e-04\n",
            "Epoch 00017: val_loss did not improve from 0.00075\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 4.8593e-04 - mse: 4.8593e-04 - val_loss: 0.0028 - val_mse: 0.0028\n",
            "Epoch 18/20\n",
            "38/45 [========================>.....] - ETA: 0s - loss: 5.3397e-04 - mse: 5.3397e-04\n",
            "Epoch 00018: val_loss did not improve from 0.00075\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 5.0683e-04 - mse: 5.0683e-04 - val_loss: 0.0010 - val_mse: 0.0010\n",
            "Epoch 19/20\n",
            "36/45 [=======================>......] - ETA: 0s - loss: 5.0781e-04 - mse: 5.0781e-04\n",
            "Epoch 00019: val_loss improved from 0.00075 to 0.00070, saving model to /content/weights.best.hdf5\n",
            "45/45 [==============================] - 0s 6ms/step - loss: 5.0743e-04 - mse: 5.0743e-04 - val_loss: 6.9702e-04 - val_mse: 6.9702e-04\n",
            "Epoch 20/20\n",
            "37/45 [=======================>......] - ETA: 0s - loss: 5.8708e-04 - mse: 5.8708e-04\n",
            "Epoch 00020: val_loss did not improve from 0.00070\n",
            "45/45 [==============================] - 0s 5ms/step - loss: 5.4876e-04 - mse: 5.4876e-04 - val_loss: 0.0028 - val_mse: 0.0028\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k9hRBQRhxzsI",
        "colab_type": "text"
      },
      "source": [
        "#Load best model from check point\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6mIHWQyTxzOW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "399af9b9-a0de-4973-c12f-fe237f0aed00"
      },
      "source": [
        "# load weights\n",
        "print(filepath)\n",
        "model.load_weights(filepath)\n",
        "# Compile model (required to make predictions)\n",
        "model.compile(loss='mse',optimizer='adam', metrics=['mse'])\n",
        "print(\"Created model and loaded weights from file\")"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/weights.best.hdf5\n",
            "Created model and loaded weights from file\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KtmzADYzxyml",
        "colab_type": "text"
      },
      "source": [
        "# Evaluate model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ISoe_EGYxxZf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "diff=[]\n",
        "ratio=[]\n",
        "predict = model.predict(X_test)\n",
        "for d in range(len(y_test)):\n",
        "    pred = predict[d][0]\n",
        "    ratio.append((y_test[d]/pred)-1)\n",
        "    diff.append(abs(y_test[d]- pred))"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D6giLzdAxwmZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "c38a0044-8c31-40ee-f25f-3d9224ef6ac6"
      },
      "source": [
        "print(predict.shape)\n",
        "print(ratio[0])\n",
        "print(diff[0])\n",
        "print(X_test.shape)"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(176, 1)\n",
            "0.002212656700337101\n",
            "0.002007812590589686\n",
            "(176, 5, 4)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yR98buG_E_oM",
        "colab_type": "text"
      },
      "source": [
        "# Denomalize prediction\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aJUDVokCH76Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = pd.read_csv(datapath, index_col = 0)\n",
        "df[\"mv close\"] = df.close\n",
        "df.drop(['volume', 'close'], 1, inplace=True)\n",
        "df = df[df.symbol == SYM]\n",
        "df.drop(['symbol'],1,inplace=True)\n",
        "\n",
        "def denormalize(df, normalized_value): #\n",
        "    df = df['mv close'].values.reshape(-1,1)\n",
        "    normalized_value = normalized_value.reshape(-1,1)\n",
        "\n",
        "    min_max_scaler = preprocessing.MinMaxScaler()\n",
        "    _ = min_max_scaler.fit_transform(df)\n",
        "    denorm = min_max_scaler.inverse_transform(normalized_value)\n",
        "    return denorm\n",
        "\n",
        "new_pred = denormalize(df, predict)\n",
        "newy_test = denormalize(df, y_test)"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wlFrNrKZH76b",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "8c8d9d70-9c92-4255-e181-673e2754aa56"
      },
      "source": [
        "def evaluation(model, X_test, y_test):\n",
        "    score = model.evaluate(X_test, y_test, verbose=0)\n",
        "    print('MSE: %.5f (RMSE: %.2f)' % (score[0], math.sqrt(score[0])))\n",
        "    return score[0], math.sqrt(score[0])\n",
        "\n",
        "evaluation(model, X_test, y_test)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE: 0.00044 (RMSE: 0.02)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.00043825662578456104, 0.020934579665819925)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0H7ae6xeFgay",
        "colab_type": "text"
      },
      "source": [
        "# Apply trading model \n",
        "![alt text](https://i.kym-cdn.com/photos/images/original/001/008/446/514.jpg)\n",
        "\n",
        "Based on our prediction we use a set of simple rules to decide when to do transaction. (Can you come up with a better rule?)\n",
        "\n",
        "\n",
        "1.   Buy when you have ZERO volume **AND** when  the current price starts to go up (2% more than the previous day)\n",
        "2.   Sell when you have stocks  **AND** when the current price starts to go down (2% less than the previous day)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sXTeHY-AH76h",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 691
        },
        "outputId": "230053d1-fff1-4504-cf86-b9eac477b280"
      },
      "source": [
        "init_balance = 100000.0\n",
        "balance = init_balance\n",
        "cash_list= []\n",
        "volume = 0\n",
        "buyx = []\n",
        "buyy =[]\n",
        "selx = []\n",
        "sely = []\n",
        "for i in range(1,len(new_pred)): # from first prediction\n",
        "    prediction= new_pred[i]\n",
        "    if(prediction > new_pred[i-1] * 1.002 and volume == 0): #if current >previous 0.2% and have not buy\n",
        "        volume = balance / newy_test[i] # buy with volume all balance/actual closing price\n",
        "        buyx.append(i) # save buy record index\n",
        "        buyy.append(newy_test[i])# save buy record price\n",
        "        print( \"Buy @\" + str(newy_test[i])) # print buy volume\n",
        "\n",
        "    if(volume > 0 and prediction * 1.002 < new_pred[i-1]): #check if have volume, and current < previous 0.2%\n",
        "        balance = volume * newy_test[i] #sell all volume\n",
        "        volume = 0\n",
        "        selx.append(i) #save record\n",
        "        sely.append(newy_test[i]) #save sell record\n",
        "        print (\"Sell @\" + str(newy_test[i])) #print sell price\n",
        "        print (\"Balance: \" + str(balance))# print balance\n",
        "\n",
        "print (\"Balance:\" + str(balance)) #print final balance\n",
        "print (\"Yield:\" + str((balance/init_balance-1)*100)+'%') #print final balance\n",
        "plt2.scatter(buyx, buyy, color='green',label ='buy')\n",
        "plt2.scatter(selx, sely, color='magenta', label ='sell')\n",
        "plt2.legend()\n",
        "plt2.grid(True)\n",
        "plt2.show()"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Buy @[712.900024]\n",
            "Sell @[700.320007]\n",
            "Balance: [98235.37430544]\n",
            "Buy @[725.27002]\n",
            "Sell @[716.650024]\n",
            "Balance: [97067.82496489]\n",
            "Buy @[694.950012]\n",
            "Sell @[772.080017]\n",
            "Balance: [107841.0341103]\n",
            "Buy @[775.320007]\n",
            "Sell @[759.690002]\n",
            "Balance: [105667.02094525]\n",
            "Buy @[787.210022]\n",
            "Sell @[783.609985]\n",
            "Balance: [105183.78880332]\n",
            "Buy @[785.309998]\n",
            "Sell @[736.080017]\n",
            "Balance: [98589.96478798]\n",
            "Buy @[760.539978]\n",
            "Sell @[750.5]\n",
            "Balance: [97288.46702833]\n",
            "Buy @[776.419983]\n",
            "Balance:[97288.46702833]\n",
            "Yield:[-2.71153297]%\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dS8sEDlcONaO",
        "colab_type": "text"
      },
      "source": [
        "# Final prediction performance with simulate trading"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fdYS3W4sH76o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "outputId": "57f16dad-d907-4b07-cd24-11a577eb1dfa"
      },
      "source": [
        "plt2.plot(new_pred,color='red', label='Prediction')\n",
        "plt2.plot(newy_test,color='blue', label='Actual')\n",
        "plt2.scatter(buyx, buyy, color='green',label='buy')\n",
        "plt2.scatter(selx, sely, color='magenta',label='sell')\n",
        "plt2.legend(loc='best')\n",
        "plt2.show()"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RypZL5gLSjmH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "  "
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AkocdxggaB5k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 42,
      "outputs": []
    }
  ]
}